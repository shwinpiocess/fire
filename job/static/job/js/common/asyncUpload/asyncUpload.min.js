!function($, undefine) {
	var h5Up = function(cfg) {
		this.cfg = cfg;
		if (cfg.autoUpload) {
			cfg.file.on('change', this.initUpload.bind(this))
		} else {
			$(cfg.btn).on('click', this.initUpload.bind(this))
		}
	}, iframeUp = function(cfg) {
		this.cfg = cfg;
		if (cfg.autoUpload) {
			cfg.file.on('change', this.initUpload.bind(this))
		} else {
			$(cfg.btn).on('click', this.initUpload.bind(this))
		}
	}, asyncUpload = function(option) {
		var that = this, cfg = {
			file : that,
			callback : function() {
			},
			btn : null,
			debug : false,
			saveUrl : 'asyncUpload.json'
		};
		$.extend(cfg, option);
		cfg.autoUpload = !cfg.btn;
		if (typeof FormData == "undefined"
				|| typeof XMLHttpRequest == "undefined") {
			new iframeUp(cfg)
		} else {
			new h5Up(cfg)
		}
	}, _frameId = 0;
	iframeUp.prototype = {
		creatIframe : function(id) {
			return $(
					"<iframe" + " name='" + id + "'" + " id='" + id + "'"
							+ " style='display:none;' />").appendTo(
					document.body)
		},
		createForm : function(action, target) {
			return $(
					"<form enctype='multipart/form-data' method='POST'"
							+ " action='" + action + "'" + " target='" + target
							+ "'" + " style='display:none;'/>").appendTo(
					document.body)
		},
		initUpload : function() {
			var me = this, cfg = me.cfg, file = cfg.file, input = file.clone()
					.val(""), name = cfg.file.attr('name');
			if (!file.val())
				return;
			if ($.isFunction(cfg.beforeUpload)
					&& cfg.beforeUpload(file.get(0)) === false)
				return;
			me.iframe = this.creatIframe(name + '_' + _frameId++);
			me.form = this.createForm(cfg.saveUrl, this.iframe.attr("name"));
			input.insertAfter(file);
			file.removeAttr("id");
			me.form.append(file);
			me.cfg.file = input;
			if (cfg.autoUpload)
				input.on('change', me.initUpload.bind(me));
			me.iframe.one('load', me.onIframeLoad.bind(me));
			me.form[0].submit()
		},
		onIframeLoad : function(e) {
			var me = this, iframe = $(e.target), responseText;
			try {
				responseText = JSON.parse(iframe.contents().text());
			} catch (ex) {
				responseText = {
					msg: {message: "上传失败!", msgType: 2},
					success: false
				};
			}
			if (!me.cfg.debug) {
				me.iframe.remove();
				me.form.remove()
			}
			me.cfg.callback && me.cfg.callback(responseText)
		}
	};
	h5Up.prototype = {
		initUpload : function() {
			var me = this, cfg = me.cfg, file = cfg.file[0], fd, xhr;
			if (!file.value)
				return;
			if ($.isFunction(cfg.beforeUpload)
					&& cfg.beforeUpload(file) === false)
				return;
			fd = new FormData(), xhr = new XMLHttpRequest();
			fd.append(cfg.file.attr('name'), file.files[0]);
			xhr.upload.onprogress= function(event){
				var loaded = event.loaded,
	    		total = event.total,
	    		per = Math.floor(100*loaded/total);
				if(typeof cfg.onprogress === 'function'){
					cfg.onprogress(event,per);
				}
			}
			xhr.onreadystatechange = me.onready.bind(me);
			xhr.open("POST", cfg.saveUrl);
			if(CsrfKey !=null || CsrfKey !=undefined){
				xhr.setRequestHeader("CsrfKey", CsrfKey);
			}
			xhr.send(fd);
			$(file).val(null);			
		},
		onready : function(event) {
			var me = this, xhr = event.target, responseText;
			if (xhr.readyState === 4) {
				if (xhr.status === 200) {
					try{
						responseText = JSON.parse(xhr.responseText);
					}catch (e) {
						// TODO: handle exception
					}
				} else {
					responseText = {
						msg: {message: "上传失败!", msgType: 2},
						success: false
					};
				}
				me.cfg.callback && me.cfg.callback(responseText)
			}			
		}
	};
	$.fn.asyncUpload = asyncUpload
}(jQuery)